@page "/listings/delete"
@using Microsoft.EntityFrameworkCore
@using FinalProject.Models
@inject IDbContextFactory<FinalProject.Data.FinalProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Listing</PageTitle>

<!-- Blue and Black Navbar -->
<div class="top-row ps-3 navbar navbar-dark bg-primary">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Doggy Domain</a>
    </div>
</div>

<!-- Main Container -->
<div class="container mt-5">
    <h1 class="text-center mb-4">Delete Listing</h1>

    <h2 class="text-center">Are you sure you want to delete this listing?</h2>
    <hr />

    @if (listing is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <!-- Listing Details -->
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@listing.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Breed</dt>
            <dd class="col-sm-10">@listing.Breed</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Age</dt>
            <dd class="col-sm-10">@listing.Age</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Location</dt>
            <dd class="col-sm-10">@listing.Location</dd>
        </dl>

        <!-- Delete Form -->
        <EditForm method="post" Model="listing" OnValidSubmit="DeleteListing" FormName="delete" Enhance>
            <div class="text-center">
                <button type="submit" class="btn btn-danger btn-lg" disabled="@(listing is null)">Delete Listing</button>
                <a href="/dog" class="btn btn-secondary btn-sm ms-2">Back to Listings</a>
            </div>
        </EditForm>
    }
</div>

@code {
    private Listing? listing;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        listing = await context.Listing.FirstOrDefaultAsync(m => m.Id == Id);

        if (listing is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteListing()
    {
        using var context = DbFactory.CreateDbContext();
        context.Listing.Remove(listing!); // Remove the listing
        await context.SaveChangesAsync(); // Save changes to the database
        NavigationManager.NavigateTo("/dog"); // Redirect to the listings page
    }
}
