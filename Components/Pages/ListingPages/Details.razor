@page "/listings/details"
@using Microsoft.EntityFrameworkCore
@using FinalProject.Models
@inject IDbContextFactory<FinalProject.Data.FinalProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Listing</h2>
    <hr />
    @if (listing is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@listing.Name</dd>
            <dt class="col-sm-2">Breed</dt>
            <dd class="col-sm-10">@listing.Breed</dd>
            <dt class="col-sm-2">Age</dt>
            <dd class="col-sm-10">@listing.Age</dd>
            <dt class="col-sm-2">Size</dt>
            <dd class="col-sm-10">@listing.Size</dd>
            <dt class="col-sm-2">Location</dt>
            <dd class="col-sm-10">@listing.Location</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@listing.Description</dd>
            <dt class="col-sm-2">ImageUrl</dt>
            <dd class="col-sm-10">@listing.ImageUrl</dd>
            <dt class="col-sm-2">Temperance</dt>
            <dd class="col-sm-10">@listing.Temperance</dd>
            <dt class="col-sm-2">Health</dt>
            <dd class="col-sm-10">@listing.Health</dd>
        </dl>
        <div>
            <a href="@($"/listings/edit?id={listing.Id}")">Edit</a> |
            <a href="@($"/listings")">Back to List</a>
        </div>
    }
</div>

@code {
    private Listing? listing;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        listing = await context.Listing.FirstOrDefaultAsync(m => m.Id == Id);

        if (listing is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
