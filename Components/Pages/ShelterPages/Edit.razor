@page "/shelters/edit"
@using Microsoft.EntityFrameworkCore
@using FinalProject.Models
@inject IDbContextFactory<FinalProject.Data.FinalProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Shelter</PageTitle>

<!-- Blue and Black Navbar -->
<div class="top-row ps-3 navbar navbar-dark bg-primary">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Doggy Domain</a>
    </div>
</div>

<!-- Main Container -->
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">Edit Shelter</h1>

    @if (Shelter is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <!-- Form Section (Card with Shadow) -->
        <div class="card shadow-lg">
            <div class="card-body">
                <EditForm method="post" Model="Shelter" OnValidSubmit="UpdateShelter" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary role="alert" />

                    <!-- Hidden Field for ID -->
                    <input type="hidden" name="Shelter.Id" value="@Shelter.Id" />

                    <!-- Form Inputs -->
                    <div class="mb-3">
                        <label for="name" class="form-label">Name:</label>
                        <InputText id="name" @bind-Value="Shelter.Name" class="form-control" aria-required="true" />
                        <ValidationMessage For="() => Shelter.Name" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email:</label>
                        <InputText id="email" @bind-Value="Shelter.Email" class="form-control" aria-required="true" />
                        <ValidationMessage For="() => Shelter.Email" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="phonenumber" class="form-label">Phone Number:</label>
                        <InputText id="phonenumber" @bind-Value="Shelter.PhoneNumber" class="form-control" aria-required="true" />
                        <ValidationMessage For="() => Shelter.PhoneNumber" class="text-danger" />
                    </div>

                    <!-- Submit Button -->
                    <button type="submit" class="btn btn-primary btn-lg w-100">
                        Save Changes
                    </button>
                </EditForm>
            </div>
        </div>
    }

    <!-- Back to List Button -->
    <div class="text-center mt-4">
        <a href="/shelters" class="btn btn-secondary btn-lg">
            <i class="bi bi-arrow-left-circle me-2"></i> Back to Shelters
        </a>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Shelter? Shelter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Shelter ??= await context.Shelter.FirstOrDefaultAsync(m => m.Id == Id);

        if (Shelter is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // Method to update the shelter
    private async Task UpdateShelter()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Shelter!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ShelterExists(Shelter!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/shelters");
    }

    // Check if shelter exists
    private bool ShelterExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Shelter.Any(e => e.Id == id);
    }
}
