@page "/dog/details"
@using Microsoft.EntityFrameworkCore
@using FinalProject.Models
@inject IDbContextFactory<FinalProject.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Listings</PageTitle>

<h1>Listings</h1>

<div>
    <h2>DogProfile</h2>
    <hr />
    @if (dogprofile is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@dogprofile.Name</dd>
            <dt class="col-sm-2">Breed</dt>
            <dd class="col-sm-10">@dogprofile.Breed</dd>
            <dt class="col-sm-2">Age</dt>
            <dd class="col-sm-10">@dogprofile.Age</dd>
            <dt class="col-sm-2">Size</dt>
            <dd class="col-sm-10">@dogprofile.Size</dd>
            <dt class="col-sm-2">Location</dt>
            <dd class="col-sm-10">@dogprofile.Location</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@dogprofile.Description</dd>
            <dt class="col-sm-2">ImageUrl</dt>
            <dd class="col-sm-10">@dogprofile.ImageUrl</dd>
        </dl>
        <div>
            <a href="@($"/dogprofiles/edit?id={dogprofile.Id}")">Edit</a> |
            <a href="@($"/dogprofiles")">Back to List</a>
        </div>
    }
</div>

@code {
    private DogProfile? dogprofile;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        dogprofile = await context.DogProfile.FirstOrDefaultAsync(m => m.Id == Id);

        if (dogprofile is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
