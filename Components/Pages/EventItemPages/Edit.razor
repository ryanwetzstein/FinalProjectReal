@page "/eventitems/edit"
@using Microsoft.EntityFrameworkCore
@using FinalProject.Models
@inject IDbContextFactory<FinalProject.Data.FinalProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Event Item</PageTitle>

<!-- Blue and Black Navbar -->
<div class="top-row ps-3 navbar navbar-dark bg-primary">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Doggy Domain</a>
    </div>
</div>

<!-- Main Container -->
<div class="container mt-5">
    <h1 class="text-center mb-4">Edit Event Item</h1>

    <!-- Form Start -->
    @if (EventItem is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm method="post" Model="EventItem" OnValidSubmit="UpdateEventItem" FormName="edit" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <!-- Form Inputs (Styled with Bootstrap Classes) -->
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="EventItem.Title" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => EventItem.Title" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="EventItem.Description" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => EventItem.Description" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="date" class="form-label">Date:</label>
                    <InputText id="date" @bind-Value="EventItem.Date" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => EventItem.Date" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="timestart" class="form-label">Time Start:</label>
                    <InputText id="timestart" @bind-Value="EventItem.TimeStart" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => EventItem.TimeStart" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="timeend" class="form-label">Time End:</label>
                    <InputText id="timeend" @bind-Value="EventItem.TimeEnd" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => EventItem.TimeEnd" class="text-danger" />
                </div>

                <div class="col-md-12 text-center mb-4">
                    <button type="submit" class="btn btn-primary btn-lg">Save Changes</button>
                </div>
            </div>
        </EditForm>
    }
    <!-- End Form -->
    <!-- Back Link -->
    <div class="text-center mt-4">
        <a href="/eventitems" class="btn btn-secondary btn-sm">Back to List</a>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private EventItem? EventItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        EventItem ??= await context.EventItem.FirstOrDefaultAsync(m => m.Id == Id);

        if (EventItem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateEventItem()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(EventItem!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!EventItemExists(EventItem!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/eventitems");
    }

    private bool EventItemExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.EventItem.Any(e => e.Id == id);
    }
}
