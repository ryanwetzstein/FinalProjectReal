@page "/eventitems/details"
@using Microsoft.EntityFrameworkCore
@using FinalProject.Models
@inject IDbContextFactory<FinalProject.Data.FinalProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Event Item Details</PageTitle>

<!-- Blue and Black Navbar -->
<div class="top-row ps-3 navbar navbar-dark bg-primary">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Doggy Domain</a>
    </div>
</div>

<!-- Main Container -->
<div class="container mt-5">
    <h1 class="text-center mb-4">Event Item Details</h1>

    <!-- Event Item Details -->
    @if (eventitem is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <div class="col-md-6 mb-3">
                <h4>Title</h4>
                <p>@eventitem.Title</p>
            </div>

            <div class="col-md-6 mb-3">
                <h4>Description</h4>
                <p>@eventitem.Description</p>
            </div>

            <div class="col-md-6 mb-3">
                <h4>Date</h4>
                <p>@eventitem.Date</p>
            </div>

            <div class="col-md-6 mb-3">
                <h4>Time Start</h4>
                <p>@eventitem.TimeStart</p>
            </div>

            <div class="col-md-6 mb-3">
                <h4>Time End</h4>
                <p>@eventitem.TimeEnd</p>
            </div>
        </div>

        <!-- Edit and Back Links -->
        <div class="text-center mt-4">
            <a href="@($"/eventitems/edit?id={eventitem.Id}")" class="btn btn-primary btn-sm">Edit</a> |
            <a href="/eventitems" class="btn btn-secondary btn-sm">Back to List</a>
        </div>
    }
</div>

@code {
    private EventItem? eventitem;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        eventitem = await context.EventItem.FirstOrDefaultAsync(m => m.Id == Id);

        if (eventitem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
